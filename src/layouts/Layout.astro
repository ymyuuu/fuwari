---
/* 导入 Roboto 字体的不同粗细 */
import '@fontsource/roboto/400.css'
import '@fontsource/roboto/500.css'
import '@fontsource/roboto/700.css'

/* 从配置文件中导入站点和个人配置 */
import { profileConfig, siteConfig } from '@/config'
/* 导入用于在页面中传递配置的组件 */
import ConfigCarrier from '@components/ConfigCarrier.astro'
/* 导入常量，这些常量用于控制页面布局和样式 */
import {
  AUTO_MODE,
  BANNER_HEIGHT,
  BANNER_HEIGHT_EXTEND,
  BANNER_HEIGHT_HOME,
  DARK_MODE,
  DEFAULT_THEME,
  LIGHT_MODE,
  PAGE_WIDTH,
} from '../constants/constants'
/* 导入默认的 favicon 图标 */
import { defaultFavicons } from '../constants/icon'
/* 导入 Favicon 类型定义 */
import type { Favicon } from '../types/config'
/* 导入工具函数，主要用于处理 URL */
import { url, pathsEqual } from '../utils/url-utils'
/* 导入 KaTeX 的样式，用于数学公式渲染 */
import 'katex/dist/katex.css'

/* 定义页面属性接口 */
interface Props {
  title?: string
  banner?: string
  description?: string
  lang?: string
  setOGTypeArticle?: boolean
}

/* 从 Astro.props 中获取页面传入的属性 */
let { title, banner, description, lang, setOGTypeArticle } = Astro.props

// 根据页面路径判断是否为主页，用于设置特定样式。
// Swup（页面切换库）可以更新 body，但会在页面切换后更新，可能导致横幅高度延迟改变，所以这里在初始加载时判断。
const isHomePage = pathsEqual(Astro.url.pathname, url('/'))

// 定义全局 CSS 变量（例如主题色）
// 为什么在 Layout 中定义，而不是在 GlobalStyles 中定义，请参考：https://github.com/withastro/astro/issues/6728#issuecomment-1502203757
const configHue = siteConfig.themeColor.hue

// 如果没有传入 banner 或 banner 内容为空，则使用站点配置中的默认 banner
if (!banner || typeof banner !== 'string' || banner.trim() === '') {
  banner = siteConfig.banner.src
}

// TODO：目前暂时不使用文章封面作为 banner
banner = siteConfig.banner.src

// 从站点配置中获取是否启用 banner
const enableBanner = siteConfig.banner.enable

// 设置页面标题，如果传入了 title，则在标题后面追加站点标题，否则使用站点标题和副标题
let pageTitle: string
if (title) {
  pageTitle = `${title} - ${siteConfig.title}`
} else {
  pageTitle = `${siteConfig.title} - ${siteConfig.subtitle}`
}

// 设置 favicon 数组，如果配置中有自定义 favicon，则使用自定义的，否则使用默认的
const favicons: Favicon[] =
  siteConfig.favicon.length > 0 ? siteConfig.favicon : defaultFavicons

// 如果没有传入 lang，则使用站点默认语言
if (!lang) {
  lang = `${siteConfig.lang}`
}
// 将语言中的下划线替换为短横线，例如 "en_US" 转换为 "en-US"
const siteLang = lang.replace('_', '-')

// 定义 banner 不同位置的偏移量（顶部、居中、底部），用于控制 banner 的垂直位置
const bannerOffsetByPosition = {
  top: `${BANNER_HEIGHT_EXTEND}vh`,
  center: `${BANNER_HEIGHT_EXTEND / 2}vh`,
  bottom: '0',
}
// 根据站点配置中的 banner 位置，获取对应的偏移值，默认为 'center'
const bannerOffset =
  bannerOffsetByPosition[siteConfig.banner.position || 'center']
---

<!DOCTYPE html>
<html lang={siteLang} class="bg-[var(--page-bg)] transition text-[14px] md:text-[16px]"
	  data-overlayscrollbars-initialize
>
	<head>

		<title>{pageTitle}</title>

		<meta charset="UTF-8" />
		<meta name="description" content={description || pageTitle}>
		<meta name="author" content={profileConfig.name}>

		<!-- Open Graph 元数据 -->
		<meta property="og:site_name" content={siteConfig.title}>
		<meta property="og:url" content={Astro.url}>
		<meta property="og:title" content={pageTitle}>
		<meta property="og:description" content={description || pageTitle}>
		{setOGTypeArticle ? (
        // 如果设置为文章类型，则设置 og:type 为 article
        <meta property="og:type" content="article" />
        ) : (
        // 否则设置为 website
        <meta property="og:type" content="website" />
        )}

		<!-- Twitter 元数据 -->
		<meta name="twitter:card" content="summary_large_image">
		<meta property="twitter:url" content={Astro.url}>
		<meta name="twitter:title" content={pageTitle}>
		<meta name="twitter:description" content={description || pageTitle}>

		<meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" />
		<meta name="generator" content={Astro.generator} />
		{/* 循环添加 favicon 链接 */}
		{favicons.map(favicon => (
			<link rel="icon"
				  href={favicon.src.startsWith('/') ? url(favicon.src) : favicon.src}
				  sizes={favicon.sizes}
				  media={favicon.theme && `(prefers-color-scheme: ${favicon.theme})`}
			/>
		))}

		<!-- 在页面渲染之前设置主题，避免闪屏 -->
		<script is:inline define:vars={{DEFAULT_THEME, LIGHT_MODE, DARK_MODE, AUTO_MODE, BANNER_HEIGHT_EXTEND, PAGE_WIDTH, configHue}}>
			// 从 localStorage 中加载主题
			const theme = localStorage.getItem('theme') || DEFAULT_THEME;
			switch (theme) {
				case LIGHT_MODE:
					document.documentElement.classList.remove('dark');
					break
				case DARK_MODE:
					document.documentElement.classList.add('dark');
					break
				case AUTO_MODE:
					if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
						document.documentElement.classList.add('dark');
					} else {
						document.documentElement.classList.remove('dark');
					}
			}

			// 从 localStorage 中加载 hue 值（色调）
			const hue = localStorage.getItem('hue') || configHue;
			document.documentElement.style.setProperty('--hue', hue);

			// 计算 --banner-height-extend，必须是 4 的倍数以避免文字模糊
			let offset = Math.floor(window.innerHeight * (BANNER_HEIGHT_EXTEND / 100));
			offset = offset - offset % 4;
			document.documentElement.style.setProperty('--banner-height-extend', `${offset}px`);
		</script>
		<!-- 定义全局 CSS 变量，应用于 <html>、<body> 及其他元素 -->
		<style define:vars={{
			configHue,
			'page-width': `${PAGE_WIDTH}rem`,
		}}></style>

		<slot name="head"></slot>

		<!-- 添加 RSS 订阅链接 -->
		<link rel="alternate" type="application/rss+xml" title={profileConfig.name} href={`${Astro.site}rss.xml`}/>

	</head>
	<body class=" min-h-screen transition " class:list={[{"lg:is-home": isHomePage, "enable-banner": enableBanner}]}
		  data-overlayscrollbars-initialize
	>
		{/* 注入配置传递组件 */}
		<ConfigCarrier></ConfigCarrier>
		{/* 插入页面主要内容 */}
		<slot />

		<!-- 在页面切换期间增加页面高度，防止滚动动画跳跃 -->
		<div id="page-height-extend" class="hidden h-[300vh]"></div>
	</body>
</html>

<!-- 全局样式定义，设置 banner 相关变量 -->
<style is:global define:vars={{
	bannerOffset,
	'banner-height-home': `${BANNER_HEIGHT_HOME}vh`,
	'banner-height': `${BANNER_HEIGHT}vh`,
}}>
@tailwind components;
@layer components {
	.enable-banner.is-home #banner-wrapper {
		@apply h-[var(--banner-height-home)] translate-y-[var(--banner-height-extend)]
	}
	.enable-banner #banner-wrapper {
		@apply h-[var(--banner-height-home)]
	}

	.enable-banner.is-home #banner {
		@apply h-[var(--banner-height-home)] translate-y-0
	}
	.enable-banner #banner {
		@apply h-[var(--banner-height-home)] translate-y-[var(--bannerOffset)]
	}
	.enable-banner.is-home #main-grid {
		@apply translate-y-[var(--banner-height-extend)];
	}
	.enable-banner #top-row {
		@apply h-[calc(var(--banner-height-home)_-_4.5rem)] transition-all duration-300
	}
	.enable-banner.is-home #sidebar-sticky {
		@apply top-[calc(1rem_-_var(--banner-height-extend))];
	}
	.navbar-hidden {
		@apply opacity-0 -translate-y-16;
	}
}
</style>

<!-- 主体脚本 -->
<script>
/* 导入 overlayscrollbars 样式及模块，用于自定义滚动条 */
import 'overlayscrollbars/overlayscrollbars.css';
import {
	OverlayScrollbars,
	// 可选的插件：ScrollbarsHidingPlugin, SizeObserverPlugin, ClickScrollPlugin
} from 'overlayscrollbars';
/* 导入主题和色调设置的工具函数 */
import {getHue, getStoredTheme, setHue, setTheme} from "../utils/setting-utils";
import {pathsEqual, url} from "../utils/url-utils";
import {
	BANNER_HEIGHT,
	BANNER_HEIGHT_HOME,
	BANNER_HEIGHT_EXTEND,
	MAIN_PANEL_OVERLAPS_BANNER_HEIGHT,
	PAGE_WIDTH
} from "../constants/constants";

/* 预加载字体的示例代码（目前被注释掉） */
// (async function() {
// 	try {
// 		await Promise.all([
// 			document.fonts.load("400 1em Roboto"),   // 加载 400 粗细
// 			document.fonts.load("700 1em Roboto"),   // 加载 700 粗细
// 		]);
// 		document.body.classList.remove("hidden");
// 	} catch (error) {
// 		console.log("加载字体失败:", error);
// 	}
// })();

/* TODO：以下为临时解决方案，用于解决切换动画时样式闪烁的问题
   参考 issue：https://github.com/withastro/astro/issues/8711，目前在 Astro 3.2.4 中已修复 */
/*
function disableAnimation() {
	const css = document.createElement('style')
	css.appendChild(
		document.createTextNode(
			`*{
              -webkit-transition:none!important;
              -moz-transition:none!important;
              -o-transition:none!important;
              -ms-transition:none!important;
              transition:none!important;
              }`
		)
	)
	document.head.appendChild(css)

	return () => {
		// 强制重绘
		;(() => window.getComputedStyle(document.body))()

		// 等待下一帧后移除样式
		setTimeout(() => {
			document.head.removeChild(css)
		}, 1)
	}
}
*/

/* 检测 banner 是否启用 */
const bannerEnabled = !!document.getElementById('banner-wrapper')

/* 定义一个函数，当点击面板外部时关闭该面板 */
function setClickOutsideToClose(panel: string, ignores: string[]) {
	document.addEventListener("click", event => {
		let panelDom = document.getElementById(panel);
		let tDom = event.target;
		// 确保事件目标是 HTML 节点
		if (!(tDom instanceof Node)) return;
		// 遍历忽略的元素，如果点击发生在忽略区域内则不关闭面板
		for (let ig of ignores) {
			let ie = document.getElementById(ig)
			if (ie == tDom || (ie?.contains(tDom))) {
				return;
			}
		}
		// 添加关闭面板的 CSS 类
		panelDom!.classList.add("float-panel-closed");
	});
}
/* 为显示设置、导航菜单、搜索面板设置点击外部关闭 */
setClickOutsideToClose("display-setting", ["display-setting", "display-settings-switch"])
setClickOutsideToClose("nav-menu-panel", ["nav-menu-panel", "nav-menu-switch"])
setClickOutsideToClose("search-panel", ["search-panel", "search-bar", "search-switch"])

/* 加载主题和色调 */
function loadTheme() {
	const theme = getStoredTheme()
	setTheme(theme)
}

function loadHue() {
	setHue(getHue())
}

/* 初始化自定义滚动条 */
function initCustomScrollbar() {
	const bodyElement = document.querySelector('body');
	if (!bodyElement) return;
	OverlayScrollbars(
		// 文档说明中提到对 body 初始化可能会影响原生功能（如 window.scrollTo），但暂时保留此处实现
		{
			target: bodyElement,
			cancel: {
				nativeScrollbarsOverlaid: true,    // 如果存在原生滚动条，则不初始化覆盖滚动条
			}
		}, {
		scrollbars: {
			theme: 'scrollbar-base scrollbar-auto py-1',
			autoHide: 'move',
			autoHideDelay: 500,
			autoHideSuspend: false,
		},
	});
	// 为所有 <pre> 标签初始化滚动条
	const preElements = document.querySelectorAll('pre');
	preElements.forEach((ele) => {
		OverlayScrollbars(ele, {
			scrollbars: {
				theme: 'scrollbar-base scrollbar-dark px-2',
				autoHide: 'leave',
				autoHideDelay: 500,
				autoHideSuspend: false
			}
		});
	});
	// 为 KaTeX 的展示公式初始化滚动条
	const katexElements = document.querySelectorAll('.katex-display') as NodeListOf<HTMLElement>;
	katexElements.forEach((ele) => {
		OverlayScrollbars(ele, {
			scrollbars: {
				theme: 'scrollbar-base scrollbar-auto py-1',
			}
		});
	});
}

/* 显示 banner 的函数 */
function showBanner() {
	const banner = document.getElementById('banner')
	if (!banner) {
		console.error('未找到 banner 元素')
		return
	}
	// 移除初始的隐藏和缩放类，使 banner 显示
	banner.classList.remove('opacity-0', 'scale-105')
}

/* 初始化页面的各项功能 */
function init() {
	// disableAnimation()()		// TODO：临时禁用动画
	loadTheme();
	loadHue();
	initCustomScrollbar();
	showBanner();
}

/* 页面加载时调用 init 函数 */
init();

/* 设置 Swup 钩子，用于页面切换时执行一些操作 */
const setup = () => {
	// TODO: 临时解决方案，用于更改 banner 的高度
	/*
	window.swup.hooks.on('animation:out:start', () => {
		const path = window.location.pathname
		const body = document.querySelector('body')
		if (path[path.length - 1] === '/' && !body.classList.contains('is-home')) {
			body.classList.add('is-home')
		} else if (path[path.length - 1] !== '/' && body.classList.contains('is-home')) {
			body.classList.remove('is-home')
		}
	})
	*/
	// 当点击链接时触发，移除首次加载时内容延迟的设置
	window.swup.hooks.on('link:click', () => {
		document.documentElement.style.setProperty('--content-delay', '0ms')

		// 如果没有启用 banner，则不处理导航栏遮挡问题
		if (!bannerEnabled) {
			return
		}
		// 根据 window 高度计算阈值，超过则隐藏导航栏
		let threshold = window.innerHeight * (BANNER_HEIGHT / 100) - 72 - 16
		let navbar = document.getElementById('navbar-wrapper')
		if (!navbar || !document.body.classList.contains('lg:is-home')) {
			return
		}
		if (document.body.scrollTop >= threshold || document.documentElement.scrollTop >= threshold) {
			navbar.classList.add('navbar-hidden')
		}
	})
	// 当内容替换时，重新初始化滚动条
	window.swup.hooks.on('content:replace', initCustomScrollbar)
	// 页面访问开始时，调整 banner 高度和其他样式
	window.swup.hooks.on('visit:start', (visit: {to: {url: string}}) => {
		const bodyElement = document.querySelector('body')
		if (pathsEqual(visit.to.url, url('/'))) {
			bodyElement!.classList.add('lg:is-home');
		} else {
			bodyElement!.classList.remove('lg:is-home');
		}

		// 页面切换期间增加页面高度，防止滚动动画跳跃
		const heightExtend = document.getElementById('page-height-extend')
		if (heightExtend) {
			heightExtend.classList.remove('hidden')
		}

		// 滚动到顶部时隐藏目录（TOC）
		let toc = document.getElementById('toc-wrapper');
		if (toc) {
			toc.classList.add('toc-not-ready')
		}
	});
	// 页面视图加载完成后，恢复页面高度
	window.swup.hooks.on('page:view', () => {
		const heightExtend = document.getElementById('page-height-extend')
		if (heightExtend) {
			heightExtend.classList.remove('hidden')
		}
	});
	// 页面访问结束时，隐藏临时增加的高度，并让 TOC 显示
	window.swup.hooks.on('visit:end', (visit: {to: {url: string}}) => {
		setTimeout(() => {
			const heightExtend = document.getElementById('page-height-extend')
			if (heightExtend) {
				heightExtend.classList.add('hidden')
			}

            // 为了让过渡效果更好，恢复 TOC 显示
            const toc = document.getElementById('toc-wrapper');
            if (toc) {
                toc.classList.remove('toc-not-ready')
            }
        }, 200)
	});
}
/* 根据是否存在 swup 对象来设置钩子 */
if (window?.swup?.hooks) {
	setup()
} else {
	document.addEventListener('swup:enable', setup)
}

/* 定义返回顶部按钮、目录和导航栏的变量 */
let backToTopBtn = document.getElementById('back-to-top-btn');
let toc = document.getElementById('toc-wrapper');
let navbar = document.getElementById('navbar-wrapper')

/* 当页面滚动时执行的函数 */
function scrollFunction() {
	let bannerHeight = window.innerHeight * (BANNER_HEIGHT / 100)

	// 控制返回顶部按钮的显示与隐藏
	if (backToTopBtn) {
		if (document.body.scrollTop > bannerHeight || document.documentElement.scrollTop > bannerHeight) {
			backToTopBtn.classList.remove('hide')
		} else {
			backToTopBtn.classList.add('hide')
		}
	}

	// 控制目录 (TOC) 的显示与隐藏
	if (bannerEnabled && toc) {
		if (document.body.scrollTop > bannerHeight || document.documentElement.scrollTop > bannerHeight) {
			toc.classList.remove('toc-hide')
		} else {
			toc.classList.add('toc-hide')
		}
	}

	// 控制导航栏在达到一定滚动阈值后隐藏
	if (!bannerEnabled) return
	if (navbar) {
		const NAVBAR_HEIGHT = 72
		// 主面板与 banner 重叠的高度（单位：像素）
		const MAIN_PANEL_EXCESS_HEIGHT = MAIN_PANEL_OVERLAPS_BANNER_HEIGHT * 16

		// 根据是否为主页和屏幕宽度决定使用哪个 banner 高度
		let bannerHeight = BANNER_HEIGHT
		if (document.body.classList.contains('lg:is-home') && window.innerWidth >= 1024) {
			bannerHeight = BANNER_HEIGHT_HOME
		}
		// 计算滚动阈值，超过该阈值时隐藏导航栏
		let threshold = window.innerHeight * (bannerHeight / 100) - NAVBAR_HEIGHT - MAIN_PANEL_EXCESS_HEIGHT - 16
		if (document.body.scrollTop >= threshold || document.documentElement.scrollTop >= threshold) {
			navbar.classList.add('navbar-hidden')
		} else {
			navbar.classList.remove('navbar-hidden')
		}
	}
}
// 绑定滚动事件
window.onscroll = scrollFunction

// 监听窗口大小变化，重新计算 banner 高度扩展值，保证其为 4 的倍数
window.onresize = () => {
	let offset = Math.floor(window.innerHeight * (BANNER_HEIGHT_EXTEND / 100));
	offset = offset - offset % 4;
	document.documentElement.style.setProperty('--banner-height-extend', `${offset}px`);
}

</script>

<!-- PhotoSwipe 图片查看器的初始化 -->
<script>
import PhotoSwipeLightbox from "photoswipe/lightbox"
import "photoswipe/style.css"

/* 声明全局变量，用于存储 PhotoSwipeLightbox 实例 */
let lightbox: PhotoSwipeLightbox
let pswp = import("photoswipe")

/* 创建 PhotoSwipe 实例的函数 */
function createPhotoSwipe() {
	lightbox = new PhotoSwipeLightbox({
		// 选择器，匹配自定义 Markdown 中的图片和文章封面图片
		gallery: ".custom-md img, #post-cover img",
		// 动态加载 PhotoSwipe 模块
		pswpModule: () => pswp,
		// 自定义关闭按钮 SVG 图标
		closeSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z"/></svg>',
		// 自定义缩放按钮 SVG 图标
		zoomSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M340-540h-40q-17 0-28.5-11.5T260-580q0-17 11.5-28.5T300-620h40v-40q0-17 11.5-28.5T380-700q17 0 28.5 11.5T420-660v40h40q17 0 28.5 11.5T500-580q0 17-11.5 28.5T460-540h-40v40q0 17-11.5 28.5T380-460q-17 0-28.5-11.5T340-500v-40Zm40 220q-109 0-184.5-75.5T120-580q0-109 75.5-184.5T380-840q109 0 184.5 75.5T640-580q0 44-14 83t-38 69l224 224q11 11 11 28t-11 28q-11 11-28 11t-28-11L532-372q-30 24-69 38t-83 14Zm0-80q75 0 127.5-52.5T560-580q0-75-52.5-127.5T380-760q-75 0-127.5 52.5T200-580q0 75 52.5 127.5T380-400Z"/></svg>',
		// 设置边距
		padding: { top: 20, bottom: 20, left: 20, right: 20 },
		wheelToZoom: true,       // 启用鼠标滚轮缩放
		arrowPrev: false,        // 不显示上一张箭头
		arrowNext: false,        // 不显示下一张箭头
		imageClickAction: 'close', // 点击图片关闭
		tapAction: 'close',        // 触摸屏点击关闭
		doubleTapAction: 'zoom',   // 双击图片放大缩小
	})

	// 添加过滤器，对 DOM 项目数据进行处理
	lightbox.addFilter("domItemData", (itemData, element) => {
		if (element instanceof HTMLImageElement) {
			// 设置图片 src 和尺寸信息
			itemData.src = element.src
			itemData.w = Number(element.naturalWidth || window.innerWidth)
			itemData.h = Number(element.naturalHeight || window.innerHeight)
			itemData.msrc = element.src
		}
		return itemData
	})

	// 初始化 PhotoSwipe 实例
	lightbox.init()
}

/* 设置 Swup 钩子，确保在页面切换时重新创建或销毁 PhotoSwipe 实例 */
const setup = () => {
	if (!lightbox) {
		createPhotoSwipe()
	}
	// 当页面视图加载时，重新创建 PhotoSwipe 实例
	window.swup.hooks.on("page:view", () => {
		createPhotoSwipe()
	})

	// 在内容替换前销毁现有的 PhotoSwipe 实例
	window.swup.hooks.on(
		"content:replace",
		() => {
			lightbox?.destroy?.()
		},
		{ before: true },
	)
}

/* 根据是否存在 swup 对象来绑定设置事件 */
if (window.swup) {
	setup()
} else {
	document.addEventListener("swup:enable", setup)
}
</script>
